<!-- Razor component for the page accessible at "/SamplePages/Basics"-->
@page "/SamplePages/Basics"

<!-- PageTitle component to set the page title -->
<PageTitle>Review page basics</PageTitle>

<!-- Main heading of the page -->
<h1>Introduction to Blazor Page (Review)</h1>

@{
    //  Blazor components combine C# and HTML code in a single file
    //  The @ symbol is used to switch between the HTML and C# environments
    //  When using @ , you're in the C# environment, allowing for C# code execution
    //  Without @, you're in the HTML environment, where you write standard HTML
}

<!--  This is a header indicating a demonstration of using methods-->
<div>
    <h3>Demonstration of using methods</h3>
    <!-- Conditionally display content base on the myName variable-->
    <p>
        @if (string.IsNullOrWhiteSpace(myName))
        {
            <!-- Display a message when myName is empty or null, indicating that the random number is odd-->
            <p>The random number is odd {@oddEvenValue}</p>
        }
        else
        {
            <!-- Display the value of myName when it's not empty-->
            <p>@myName</p>
        }
    </p>

    <!-- This is a button that triggers the RandomValue method when clicked.-->
    <button class="btn-success" @onclick="RandomValue">Random Value</button>
</div>

<section class="setflex">
    <div class="onethird">
        <!-- Heading for this section -->
        <h3>Text Boxes</h3>
        <!-- Label and input for entering an email-->
        <label>
            Enter an Email
            <input type="email" @bind="emailText" placeholder="Enter Email" />
        </label>
        <br />
        <!-- Label and input for entering an password-->
        <label>
            Enter an Password
            <input type="password" @bind="passwordText" placeholder="Enter Password" />
        </label>
        <br />
        <!-- Label and input for entering an Date-->
        <label>
            Enter an Email
            <input type="date" @bind="dateText" />
        </label>
        <br />
        <!-- Button to trigger the TextSubmit method -->
        <button class="btn-success" @onclick="TextSubmit">Text Submit</button>
    </div>
    <div class="onethird">
        <h3>Radio Buttons, Check Box and Text Areas</h3>
        <br/>
        <label>
            Select your favorite meal using sa foreach loop<br/>
        </label>
        <br/>
        @foreach (var item in @meals)
        {
            @* Loop through the meals lists and create radio buttons for each meal option *@
            <input type="radio" nam="meal" value="@item" @onchange="HandMealSelection" checked="@(item == meal)"/> @item
            <br/>
        }
        <br/>
        <label>
            <!-- Checkbox inpout bound to the acceptance box variable-->
            <input type="checkbox" value="true" @bind="acceptanceBox"/>
            <!-- label text indicating the aggreemebt-->
            &nbsp; I agree to terms
        </label>
        
        <br/>
        <br />
        <!-- Textarea input element -->
        <textarea rows="5" cols="50" placeholder="Enter message" 
            @bind="messageBody"></textarea> <!-- Data binding to the 'messageBody' C# variable -->
        
        <br/>
        <br/>
        <!-- Button element for submitting the RadioCheckAreaSubmit method when clicked -->
        <button class="btn-success" @onclick="RadioCheckAreaSubmit">
            Radio/Check/Area Submit
        </button>
    </div>
    <div class=onethird>
        <h3>List and Slider</h3>
        <label>
            <!-- Display a label for the dropdown, instructing the user to select their favorite ride. -->
            Select your favorite Ride

            <!-- Create a dropdown select element that binds to the 'myRide' property. -->
            <select @bind="myRide">

                <!-- Default option with a value of "0" and instructs the user to select a ride. -->
                <option value="0">Select ride ...</option>

                <!-- Loop through each 'ride' in the 'rides' collection and create an option element for each. -->
                @foreach (var ride in @rides)
                {
                    <!-- Set the option value to the 'ValueID' of the 'ride' object. -->
                    <option value="@ride.ValueID">
                        <!-- Display the 'DisplayText' of the 'ride' object as the option text. -->
                        @ride.DisplayText
                    </option>
                }
            </select>
        </label>
    
    </div>
</section>


<div>
    <h2>@feedback</h2>
</div>